<!-- Build the Fulfillment stuff -->
<project name="jmdns" default="help" basedir=".">
	<target name="init">
		<mkdir dir="${dest}" />
		<tstamp />
	</target>

	<!-- Configure the context PATH for this application -->
	<property name="src" value="./src" />
	<property name="lib" value="./lib" />
	<property name="test" value="./test" />
	<property name="dest" value="./classes" />
	<property name="reports" value="./reports" />
	<property name="doc" value="./docs" />
	<property name="jdk" value="1.5" />
	<property name="version" value="3.2.1" />

	<!-- Configure custom Ant tasks for the Manager application -->
	<path id="jmdns.classpath">
		<fileset dir="lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="help" description="Prints brief help message to screen">
		<echo message="usage:" />
		<echo message="  ant TARGET where TARGET is one of the following:" />
		<echo message="      build   --- Compiles the JmDNS sources. Including the tools" />
		<echo message="      test    --- Compiles the JmDNS tests and runs them against JmDNS" />
		<echo message="      tools   --- Compiles the tools: The browser and main class" />
		<echo message="      samples --- Compiles the samples in the samples package" />
		<echo message="      jar     --- Creates the jmdns.jar file " />
		<echo message="      bundle  --- Creates OSGi javax.jmdns_${version}.jar bundle" />
		<echo message="      javadoc --- Creates the javadoc docs " />
		<echo message="      release --- Creates a release " />
		<echo message="      clean   --- Cleanup time! " />
		<echo message="      help    --- This message " />
	</target>

	<!-- Executable Targets -->

	<target name="build" depends="init" description="compile the generated source">
		<javac target="${jdk}" srcdir="${src}" destdir="${dest}" debug="true">
			<compilerarg value="-Xlint" />
			<include name="javax/**/*.java" />
			<classpath refid="jmdns.classpath" />
		</javac>
	</target>

	<target name="tools" depends="build" description="Main program">
		<javac target="${jdk}" srcdir="${src}" destdir="${dest}">
			<compilerarg value="-Xlint" />
			<include name="com/**/tools/*.java" />
			<classpath refid="jmdns.classpath" />
		</javac>
	</target>

	<target name="samples" depends="build" description="Sample programs">
		<javac target="${jdk}" srcdir="${src}" destdir="${dest}">
			<compilerarg value="-Xlint" />
			<include name="samples/*.java" />
			<classpath refid="jmdns.classpath" />
		</javac>
	</target>

	<target name="jar" depends="build,tools" description="Jar the files">
		<jar destfile="${lib}/jmdns.jar" manifest="${lib}/jmdns.manifest" basedir="${dest}" includes="**/*.class" />
	</target>

	<target name="bundle" description="Creates an OSGi bundle" depends="jar">
		<get src="http://www.aqute.biz/repo/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar" dest="bnd.jar" />
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="bnd.jar" />
		<echo file="jmdns.bnd" append="false">
				Bundle-Version: ${version}
				Bundle-Name: JmDNS is a java implementation of the IETF draft RFP multicast extensions for DNS
				Bundle-SymbolicName: javax.jmdns
				Bundle-Vendor: jmdns.sourceforge.net
				Bundle-RequiredExecutionEnvironment: J2SE-${jdk}
				<!-- Hide non API packages -->
				Private-Package: com.strangeberry.jmdns.tools,samples
				<!-- Do not import anything -->
				Import-Package:
				<!-- whenever API is changed, increment this version number according to OSGi spec: -->
				<!-- API breakage: incr major, Feature addition: incr: minor -->
				Export-Package: javax.jmdns;version=${version}"
			</echo>
		<bndwrap definitions="." jars="${lib}/jmdns.jar" output="${lib}/javax.jmdns_${version}.jar" />
	</target>

	<target name="javadoc" depends="build" description="Create the java doc">
		<javadoc destdir="${doc}" author="true" version="true" header="JmDNS ${version}" windowtitle="JmDNS">
			<fileset dir="${src}" defaultexcludes="yes">
				<include name="javax/**/*.java" />
				<include name="com/**/*.java" />
			</fileset>

			<doctitle>
				<![CDATA[<h1>JmDNS</h1>]]></doctitle>

		</javadoc>
	</target>

	<target name="release" depends="build,tools,javadoc,jar,bundle" description="Create a release">
		<delete dir="jmdns-${version}" />
		<copy todir="jmdns-${version}">
			<fileset dir="." includes="*.txt" />
			<fileset dir="." includes="NOTICE" />
			<fileset dir="." includes="LICENSE" />
			<fileset dir="." includes="lib/jmdns.jar" />
			<fileset dir="." includes="lib/jmdns.manifest" />
			<fileset dir="." includes="src/**/*.java" />
			<fileset dir="." includes="test/**/*.java" />
			<fileset dir="." includes="docs/**" />
			<fileset dir="." includes="build.xml" />
			<fileset dir="." includes="fulllogging.properties" />
		</copy>
		<zip destfile="jmdns-${version}.zip">
			<fileset dir="." includes="jmdns-${version}/**" />
		</zip>
		<tar destfile="jmdns-${version}.tar">
			<tarfileset dir="." includes="jmdns-${version}/**" />
		</tar>
		<gzip destfile="jmdns-${version}.tgz" src="jmdns-${version}.tar" />
	</target>

	<target name="clean">
		<delete dir="jmdns-${version}" failonerror="false" />
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="classes" includes="**" />
			<fileset dir="${reports}" includes="**" />
			<fileset dir="${lib}" includes="*.jar" />
			<fileset dir="." includes="jmdns-**" />
			<fileset dir="." includes="*.bnd" />
			<fileset dir="." includes="bnd.jar" />
		</delete>
	</target>

	<target name="test" depends="build, jar">
		<mkdir dir="${reports}" />
		<get src="http://repo2.maven.org/maven2/org/easymock/easymock/2.5.2/easymock-2.5.2.jar" usetimestamp="yes" dest="${lib}/easymock-2.5.2.jar" />
		<get src="http://repo2.maven.org/maven2/junit/junit/4.8.1/junit-4.8.1.jar" usetimestamp="yes" dest="${lib}/junit-4.8.1.jar" />

		<javac target="${jdk}" srcdir="${test}" destdir="${dest}">
			<compilerarg value="-Xlint" />
			<classpath refid="jmdns.classpath" />
		</javac>

		<junit printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement path="${dest}" />
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<batchtest fork="yes" todir="${reports}">
				<formatter type="xml" />
				<formatter type="brief" usefile="false" />
				<fileset dir="${test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${reports}">
			<fileset dir="${reports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${reports}" />
		</junitreport>
	</target>

</project>
